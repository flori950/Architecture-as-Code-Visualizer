name: 🚀 Deploy Architecture-as-Code Visualizer

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      skip_tests:
        description: 'Skip tests (emergency deploy)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  CACHE_DEPENDENCY_PATH: 'package-lock.json'

jobs:
  # Build and Test Job
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

    - name: 📦 Install dependencies
      run: |
        echo "::group::Installing dependencies"
        npm ci --prefer-offline --no-audit --progress=false
        echo "Dependency installation completed"
        npm ls --depth=0
        echo "::endgroup::"

    - name: 🔍 Lint code
      if: github.event.inputs.skip_tests != 'true'
      run: |
        echo "::group::Linting code"
        npm run lint
        echo "✅ Code linting passed"
        echo "::endgroup::"

    - name: 🧪 Run tests
      if: github.event.inputs.skip_tests != 'true'
      run: |
        echo "::group::Running tests"
        npm run test:run
        echo "✅ All tests passed"
        echo "::endgroup::"

    - name: 📊 Pre-build analysis
      run: |
        echo "::group::Pre-build analysis"
        echo "Analyzing project structure before build..."
        echo "Source files:"
        find src -name "*.tsx" -o -name "*.ts" | wc -l
        echo "Dependencies:"
        npm list --depth=0 --json > dependency-report.json
        echo "::endgroup::"

    - name: 🏗️ Build application
      run: |
        echo "::group::Building application"
        npm run build
        echo "✅ Build completed successfully"
        echo "::endgroup::"

    - name: 📊 Bundle analysis
      run: |
        echo "::group::Bundle Analysis"
        npm run build:analyze
        echo "::endgroup::"

    - name: 📁 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}
        path: |
          dist/
          dependency-report.json
        retention-days: 30
        compression-level: 9

    - name: 📋 Generate build summary
      run: |
        echo "# 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Build Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Node Version**: \`${{ env.NODE_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: \`$(date -u)\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 Bundle Info" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -lah dist/ | head -20 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Security Scan Job
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main')
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Security audit
      run: |
        echo "::group::Security Audit"
        npm audit --audit-level=moderate || echo "⚠️ Found security issues, but continuing..."
        echo "::endgroup::"

    - name: 🔍 Dependency check
      run: |
        echo "::group::Dependency Vulnerability Check"
        echo "Checking for known vulnerabilities..."
        # Add security scan results to summary
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        npm audit --audit-level=low --json | jq '.vulnerabilities | length' >> $GITHUB_STEP_SUMMARY || echo "0" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "::endgroup::"

  # Production Deploy Job
  deploy-production:
    name: 🌐 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: production
      url: ${{ vars.DEPLOYMENT_URL || 'https://your-domain.com' }}
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}
        path: ./artifacts

    - name: 📂 Prepare deployment files
      run: |
        echo "::group::Preparing deployment"
        ls -la ./artifacts/
        
        # Create deployment directory
        mkdir -p ./deploy
        cp -r ./artifacts/dist/* ./deploy/
        
        # Add deployment metadata
        echo "<!-- Deployed: $(date -u) -->" >> ./deploy/index.html
        echo "<!-- Commit: ${{ github.sha }} -->" >> ./deploy/index.html
        echo "<!-- Branch: ${{ github.ref_name }} -->" >> ./deploy/index.html
        
        # List deployment files
        echo "Files to deploy:"
        find ./deploy -type f -exec ls -la {} \;
        echo "Total deployment size: $(du -sh ./deploy | cut -f1)"
        echo "::endgroup::"

    - name: 🚀 Deploy to Production FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.6
      with:
        server: ${{ secrets.FTP_SERVER }}
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /aac/
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.DS_Store
          **/Thumbs.db
          **/*.log
          **/npm-debug.log*
          **/yarn-debug.log*
          **/yarn-error.log*
          **/.env*
          **/src/**
          **/.husky/**
          **/tests/**
          **/.vscode/**
          **/coverage/**
          **/*.map
        dry-run: false
        log-level: verbose
        security: strict

    - name: 🔍 Verify deployment
      run: |
        echo "::group::Deployment Verification"
        echo "✅ Deployment completed successfully!"
        echo "🌐 Production URL: ${{ vars.DEPLOYMENT_URL || 'https://your-domain.com' }}"
        echo "📊 Deployment completed at: $(date -u)"
        echo "::endgroup::"

    - name: 📋 Production deployment summary
      run: |
        echo "# ✅ Production Deployment Successful! 🎉" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🌐 Live Site" >> $GITHUB_STEP_SUMMARY
        echo "Your **Architecture-as-Code Visualizer** is now live!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**🔗 [${{ vars.DEPLOYMENT_URL || 'https://your-domain.com' }}](${{ vars.DEPLOYMENT_URL || 'https://your-domain.com' }})**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: \`$(date -u)\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: [\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **FTP Server**: \`${{ secrets.FTP_SERVER }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Size**: \`$(du -sh ./deploy | cut -f1)\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🚀 What's New" >> $GITHUB_STEP_SUMMARY
        echo "- Bundle optimization with lazy loading" >> $GITHUB_STEP_SUMMARY
        echo "- Service worker for better performance" >> $GITHUB_STEP_SUMMARY
        echo "- Enhanced theme system" >> $GITHUB_STEP_SUMMARY
        echo "- Improved diagram rendering" >> $GITHUB_STEP_SUMMARY

    - name: 🔔 Production deployment notification
      if: success()
      run: |
        echo "::notice title=🚀 Production Deployment Success::Architecture-as-Code Visualizer deployed successfully to ${{ vars.DEPLOYMENT_URL || 'production server' }}"

  # Staging Deploy Job
  deploy-staging:
    name: 🧪 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: 
      name: staging
      url: ${{ vars.STAGING_URL || 'https://staging.your-domain.com' }}
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.sha }}
        path: ./artifacts

    - name: 📂 Prepare staging deployment
      run: |
        echo "::group::Preparing staging deployment"
        mkdir -p ./deploy
        cp -r ./artifacts/dist/* ./deploy/
        
        # Add staging environment indicator
        echo "<!-- STAGING ENVIRONMENT -->" >> ./deploy/index.html
        echo "<!-- Deployed: $(date -u) -->" >> ./deploy/index.html
        echo "<!-- PR #${{ github.event.number || 'N/A' }} -->" >> ./deploy/index.html
        
        # Modify title to indicate staging
        sed -i 's/<title>/<title>[STAGING] /' ./deploy/index.html
        
        echo "Staging deployment prepared"
        echo "::endgroup::"

    - name: 🧪 Deploy to Staging FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.6
      with:
        server: ${{ secrets.STAGING_FTP_SERVER || secrets.FTP_SERVER }}
        username: ${{ secrets.STAGING_FTP_USERNAME || secrets.FTP_USERNAME }}
        password: ${{ secrets.STAGING_FTP_PASSWORD || secrets.FTP_PASSWORD }}
        local-dir: ./deploy/
        server-dir: /aac-staging/
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.DS_Store
          **/Thumbs.db
          **/*.log
          **/.env*
        dry-run: false
        log-level: verbose

    - name: 🧪 Staging deployment summary
      run: |
        echo "# 🧪 Staging Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Staging Environment" >> $GITHUB_STEP_SUMMARY
        echo "**[${{ vars.STAGING_URL || 'https://staging.your-domain.com' }}](${{ vars.STAGING_URL || 'https://staging.your-domain.com' }})**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🧪 This is a staging deployment for testing purposes." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PR**: #${{ github.event.number || 'Manual deployment' }}" >> $GITHUB_STEP_SUMMARY